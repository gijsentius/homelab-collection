# Global settings
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

# Default settings
defaults
    log global
    mode http
    option httplog
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

# Frontend for HTTP traffic (port 80)
frontend http_frontend
    bind *:80
    default_backend http_backend

    # Use ACLs to route traffic based on the Host header
    acl is_vm1 hdr(host) -i vm1.example.com
    acl is_vm2 hdr(host) -i vm2.example.com
    acl is_k8s hdr(host) -i k8s.example.com

    use_backend vm1_http_backend if is_vm1
    use_backend vm2_http_backend if is_vm2
    use_backend k8s_http_backend if is_k8s

# Backend for HTTP traffic to vm1.example.com
backend vm1_http_backend
    mode http
    server vm1 <vm1-ip>:80

# Backend for HTTP traffic to vm2.example.com
backend vm2_http_backend
    mode http
    server vm2 <vm2-ip>:80

# Backend for HTTP traffic to k8s.example.com
backend k8s_http_backend
    mode http
    server k8s <k8s-cluster-ip>:80

# Frontend for HTTPS traffic (port 443, TCP passthrough)
frontend https_frontend
    bind *:443
    default_backend https_backend

    # Use ACLs to route traffic based on SNI (Server Name Indication)
    acl is_vm1 req.ssl_sni -i vm1.example.com
    acl is_vm2 req.ssl_sni -i vm2.example.com
    acl is_k8s req.ssl_sni -i k8s.example.com

    use_backend vm1_https_backend if is_vm1
    use_backend vm2_https_backend if is_vm2
    use_backend k8s_https_backend if is_k8s

# Backend for HTTPS traffic to vm1.example.com
backend vm1_https_backend
    mode tcp
    server vm1 <vm1-ip>:443

# Backend for HTTPS traffic to vm2.example.com
backend vm2_https_backend
    mode tcp
    server vm2 <vm2-ip>:443

# Backend for HTTPS traffic to k8s.example.com
backend k8s_https_backend
    mode tcp
    server k8s <k8s-cluster-ip>:443
